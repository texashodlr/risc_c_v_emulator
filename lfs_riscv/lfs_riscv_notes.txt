RISC-V Symbolic Register Names:
Register:       ABI Names   Desc        Saver
x0      zero    Hard-wired zero     -
x1      ra      return address      Caller
x2      sp      stack pointer       Callee
x3      gp      global pointer      -
x4      tp      thread pointer      -
x5      t0      Temp/Alt Link Register Caller
x6-7    t1-2    Temp                Caller
x8      s0/fp   Saved Register/Frame pointer Callee
x9      s1      Saved Register      Callee
x10-11  a0-1    Function Args/Return Values Caller
x12-17  a2-7    Function Arguments  Caller
x18-27  s2-11   Saved Registers     Callee
X29-31  t3-6    Temps               Caller

Every single one of these registers is 32 Bits wide

ABI == Application Binary Interface, specifies a purpose for all registers

Most RV32I (base integer ISA) instructions can be grouped under:
    Addition
    Subtraction
    Bitwise Logical Operations
    Load and Store
    Jumps
    Branches

Control Status Registers (CSRs) are a separate banke of registers with a
    separate 12-bit address space, limiting their number to 4096
    contain general data about the CPU and other mx/diag information

CSRs are special registers that are designed to control and monitor the processor's
    operations. They serve as the mechanism through which software interacts
    with hardware to adjust settings, manage exceptions and acquire information about the processor's status.

Most important CSRs:
    mstatus (machine status) -- controls and monitors the machine's operating mode
        and privilege level (M/S/U)
    mepc (Machine exception program counter) -- stores the pc val of the insn that caused an exceptions
        or interrupt
    mtvec (Machine trap-vector base address) specifies the base addr of the trap handler for 
        machine mode, determining where the proc should jump to when an excep occurs
    mcause (Machine Cause register) -- provides information about the reason for the most recent exception or interrupt.
    misa (Machine ISA Register) specifies the support ISA extensions + encodes the bit width of the base interacts
        (RV32/64/128)
    
Vector (V) Extension Task Group
'M' Extension signifies the multiplication extension which isn't included in the base spec.
'F' Float Extension SP-FP (registers (f0 - f31))
'D' Double Extension DP-FP
'C' Compressed extension, which alternative 16-Bit encoding for subset of existing instructions
RV32IMAC seems to be a general standard for RV

Instruction encoding:
    1x 32 Bit wide program counter register
    32x 32Bit wide registers named x0-31
    40x Unique 32-bit wide unprivileged insns in six different formats (R,I,S,B,U,J)
    24x Add'l unique 32-bit wide privileged insns in two formats (R and I)

    Fixed insn length -- all insns are encoded in 32 Bits

More insn encodings:
    R -- insns for two source one dest register (arith, logic ops)
    I -- insns that involve an immediate val (constant) and a source register
        Think: load or addi
    S -- insns are a subset of the I, specifically for storing data into memory
        may involve a source register an immediate offset and a base addr reg to
        specify the memory location where the data is to be stored
    B -- Insns are used for conditional branching operations. They compare two registers
        and based on ther esult determine whether to take a branch insn or not
            beq, bne
    U -- Insns used for setting the upper bits of a register
        to a const value, often used for init'ng pointers or addresses.
        lui (load upper imme) and auipc (add upper imme to PC)
    J -- Insns for unconditional jump Operations
        jal (jump and link) -- subroutine calls.
    
    Different handlings of immediates is the exact characteristic that 
        defines the insns types but all of them tend to encode the immediate
        in a similar positions in order to simply HW implementation: All imme decode to 32-B wide

    Insn in Ass Lang
    add x1, x2, x3 --> 0x003100b3 --> 0000 0000 0011 0001 0000 0000 1011 0011
    func7->rs2-> rs1->funct3->rd->opcode
RISC-V Reference Card Exercises:
    Which bitwise logical operations are available?
        AND OR XOR
    Which conditional branches are available?
        beq/bne/blt/bge/
    Which instructions use immediate values?
        I-Type (ADD/XOR/OR/AND...)
    Are there any traditional instructions missing?
        !, ble bgt, ldi, nop, unconjump, etc

There is no flag/condition-code register, relies on branch insn to evaluate conditions
    using contents of gp registers
x0 is read-only zero, no writing!

No way to specify 32-b immediate in a single insn
    all insns are encoded in the same length, so having to fetch a second word with an immediate
    wouldn't be RISCy
Any register other than x0 can be used as the stack pointer
No mul or div, use regular arith and logical insns

PMA Checker
Physical Memory Protection -- Trusted execution environment -- limits the physical addreses access
    by SW running on a hart (HW Thread)
RISCV Supports page-based virtual memory of several widths and there is the special S-Mode
    insn used for sync'ng updates between HW threads.

## RISCV Assembly Language ##
1. Instructions: short mnemonic (add/ld/xor) and a series of operands
2. Registers: Processor internal memory locations used to store intermediate results and control information
3. Labels: Symbolic names for memory locations that can be used as targets for branch and jump instructions
4. Directives: Special commands used to cotnrol behavior of the assembler, such as setting memory regions or defining constants
5. Macros: User-defined sequences of instructions taht can be invoked with a single macro-call
6. Psuedo-Insns: Synthetic instructions that are translated by the assembler into one or more real instructions,
    allowing for a higher level more concise representation of the code.

General RISC-V Assembler Directives
.align -- Aligns the location counter to a specified power of 2 boundary
.section -- Specifies the section of the output file where the following data should be placed
.byte defines an array of 8b values
.half defines an array of 16b values
.word defines an array of 32b values
.data specifies the start of the data section where initialzied data is stored.
.text specifies the start of the code section where instructions are stored.
.globl declares a symbol as global and accessible from the other files
.equ assigns a value to a symbol useful for constants
.string defines a string of ASCII chars with a null terminator

There's 4096 CSRs, each is associated with a HART
    Unprivileged is interested in them as timers, counters, status

CSR access in RISC-V works by using special instructions to read and write to specifi memory addrs'
    that correspond to the various CSR
    E.G: CSRRW (Control Status Register Read/Write)
         CSRRS (Control Status Register Read and Set)
         CSRRC (Control and Status Register Read and Clear)

Labels, when an assembler encounters a label in the code, will record the memory address associated with the insn or data immediately
    following the label and replace the label with a number that leads the code to the corresponding memory address in the assembled machine code
EX:
    loop:
        add x1, x2, x3
        addi x1, x1, 1
        j loop
The definition of loop causes the assembler to replace further appearances of Loop with the memory address associated with the Label
    that is the address where the instruction immediately after the label will be stored

Can do the same with .data:
.data
count:  .word    0          #4B word init'd at 0 so its address is the same as the beginning of the data section
array:  .half    6, 5, 5, 3, 2, 1 # Address of array is the address of count+4, sequence of 6 half words (16b*6)
msg:    .string  "Hey there"
age:    .byte    21

RV32I Insns are normally 12 bit in size but then size extend to the width of the dest reg

RV32I instructions set includes the ecall instruction whch performs an environment call.
    The insn has no ops instead we specifiy the environment call number in reg a0 and send any
        args in the remaining a regs (like a1 for venus)
    
    addi a0 x0 1    # print_int ecall
    addi a1 x0 42   # integer 42
    ecall

First insn loads 1 into a0 the means ecall #1 to print an integer on the screen
Second insn loads 42 into a1
Third is an ecall insn, runtime env of the sim takes the contents of the a1 and prints 42 in the termin

VS Code venus provides two env calls 0x130, 0x131 to activiate terminal input the ecal 0x130 must be called
    then run ecall 0x131 to read the input.
    *Enter* -> Inputs are buffered
    three states after calling 0x131 (read input)
        a0 = 1 still waiting for input
        a0 = 0 all input has been read/buffer is empty
        a0 = 2 input has been detected and one cahar has been read into a1 in UTf-16 code.

Algorithm Code Notes:
    char *str = "RISCV is the bomb!"
    
    String called str, which is technically a pointer to a char init'd to point to a hardcoded string
        const that reads "RISCV...."

ABI of an OS usually refers to the standardized interface between the system software (OS kernel) and user applicaitons that allow them to communicate and interoperate with eachother
ABI defines how the components of an OS such as syslibs kernel and other low-level components interact with application programs
Preprocessor -> Compiler -> Assembler -> Linker